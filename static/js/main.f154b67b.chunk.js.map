{"version":3,"sources":["images/noun_Peace_1039545.png","images/userProfile.svg","images/yellowStar.svg","map.png","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","src","noun","userPic","star","Component","App","state","objects","craiglist","prices","getObjects","map","listing","i","console","log","class","Images","width","height","alt","Title","text-align","type","label","this","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6r4VAAAA,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,8PCgC5BC,E,iLAzBX,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,WACZ,4BACE,yBAAKC,IAAKC,OAEZ,yCAEA,4BACE,2BAAOF,UAAU,eAEnB,4BACE,yBAAKC,IAAKE,IAASH,UAAU,UAE/B,yCACA,4BACE,yBAAKC,IAAKG,OAEZ,6C,GApBWC,a,yBCEAC,E,2MACnBC,MAAQ,CACNC,QAASC,EACTC,OAAQ,M,EAGVC,WAAa,WAoBX,OAnBkB,EAAKJ,MAAMC,QAAQI,KAAI,SAACC,EAASC,GAGjD,OAFAC,QAAQC,IAAIH,GAGV,yBAAKI,MAAM,QACT,yBACEhB,IAAKY,EAAQK,OAAO,GACpBC,MAAM,OACNC,OAAO,OACPC,IAAI,WAEN,yBAAKJ,MAAM,aACT,4BACE,2BAAIJ,EAAQS,c,wEAUtB,OACE,6BACE,kBAAC,EAAD,MAEA,yBAAKtB,UAAU,aACb,yBAAKA,UAAU,OACb,0BAAMA,UAAU,QAAQuB,aAAW,UACjC,wCACA,6BAEA,2BAAOC,KAAK,WAAWC,MAAM,SAF7B,SAKA,6BAEA,2BAAOD,KAAK,WAAWC,MAAM,SAF7B,cAKA,6BAEA,2BAAOD,KAAK,WAAWC,MAAM,SAF7B,gBAMF,8BACE,2BAAOzB,UAAU,OAOnB,0BAAMA,UAAU,SAAhB,SAEE,wBAAIA,UAAU,cAAc0B,KAAKf,eAEnC,0BAAMX,UAAU,SACd,yBAAKC,IAAKW,IAAKS,IAAI,OAAOF,MAAM,kB,GAnEbd,aCKbsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f154b67b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noun_Peace_1039545.da765037.png\";","module.exports = __webpack_public_path__ + \"static/media/userProfile.ebd28a24.svg\";","module.exports = __webpack_public_path__ + \"static/media/yellowStar.e860c671.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.6970150b.png\";","import React, { Component } from \"react\";\nimport noun from \"../images/noun_Peace_1039545.png\";\nimport userPic from \"../images/userProfile.svg\";\nimport star from \"../images/yellowStar.svg\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"NavBar\">\n        <li className=\"NavList\">\n          <ul>\n            <img src={noun} />\n          </ul>\n          <ul>CraigList</ul>\n\n          <ul>\n            <input className=\"searchBar\"></input>\n          </ul>\n          <ul>\n            <img src={userPic} className=\"user\" />\n          </ul>\n          <ul>Favorites</ul>\n          <ul>\n            <img src={star} />\n          </ul>\n          <ul>Profile</ul>\n        </li>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import \"./App.css\";\nimport craiglist from \"./craiglist.json\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport map from \"./map.png\"\n\nexport default class App extends Component {\n  state = {\n    objects: craiglist,\n    prices: null\n  };\n\n  getObjects = () => {\n    const listArray = this.state.objects.map((listing, i) => {\n      console.log(listing);\n\n      return (\n        <div class=\"card\">\n          <img\n            src={listing.Images[0]}\n            width=\"50px\"\n            height=\"50px\"\n            alt=\"Avatar\"\n          />\n          <div class=\"container\">\n            <h4>\n              <b>{listing.Title}</b>\n            </h4>\n          </div>\n        </div>\n      );\n    });\n    return listArray;\n  };\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <span className=\"col-3\" text-align=\"center\">\n              <div>Housing</div>\n              <div>\n\n              <input type=\"checkbox\" label=\"pets\"/> Pets\n\n              </div>\n              <div>\n\n              <input type=\"checkbox\" label=\"pets\"/> Furnished\n\n              </div>\n              <div>\n\n              <input type=\"checkbox\" label=\"pets\"/> Non-Smoking\n\n              </div>\n\n            <form>\n              <input className=\"\"/>\n              \n              \n            </form>\n            \n            \n            </span>\n            <span className=\"col-5\">\n              helloo\n              <ui className=\"list-group\">{this.getObjects()}</ui>\n            </span>\n            <span className=\"col-4\">\n              <img src={map} alt=\"blah\" width=\"449px\" ></img>\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}